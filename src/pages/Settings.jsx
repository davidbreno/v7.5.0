import { Link } from 'react-router-dom'
import Sidebar from '../components/Sidebar'
import { useTheme, exportData, importData, reset, settings, saveSettings } from '../data/store'
import { useRef, useEffect, useState } from 'react'
function Header({ title }){ return (<header className="topbar"><div className="brand">{title}</div><nav className="menu"><Link to="/">Dashboard</Link></nav></header>) }
export default function Settings(){ const { theme, setTheme, apply } = useTheme(); const fileRef=useRef(null); const [cfg,setCfg]=useState(settings()); useEffect(()=>{ apply(theme) },[theme])
  function onExport(){ const blob=new Blob([exportData()],{type:'application/json;charset=utf-8'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='dashboard-data.json'; a.click(); URL.revokeObjectURL(url) }
  async function onImportFile(e){ const file=e.target.files?.[0]; if(!file) return; const text=await file.text(); const ok=importData(text); alert(ok?'Importado com sucesso.':'Arquivo inválido.'); e.target.value=''; if(ok) location.reload() }
  function saveCfg(){ saveSettings(cfg); alert('Configurações salvas.') }
  return (<div className="layout"><Sidebar /><div><div className="wrap"><div className="widget"><h3 className="font-semibold mb-2">Tema</h3><div className="flex flex-wrap gap-3">{['default','neon','ocean','dracula','light','royal','midnight','sunset','cyberpunk'].map(t=>(<label key={t} className="flex items-center gap-2"><input type="radio" name="theme" value={t} defaultChecked={theme===t} onChange={(e)=>{ setTheme(e.target.value); apply(e.target.value) }} /> {t}</label>))}</div></div><div className="widget"><h3 className="font-semibold mb-2">Pré-visualizar tema (não salva)</h3><div className="flex gap-2 items-center"><select id="previewTheme" className="bg-[color:var(--panel)] border border-white/10 rounded px-3 py-2"><option value="default">default</option><option value="neon">neon</option><option value="ocean">ocean</option><option value="dracula">dracula</option><option value="light">light</option><option value="royal">royal</option><option value="midnight">midnight</option><option value="sunset">sunset</option><option value="cyberpunk">cyberpunk</option></select><button onClick={()=>{ const v=document.getElementById('previewTheme').value; const b=document.body; b.className=b.className.replace(/(^|\s)theme-\w+\b/g,'').trim(); if(v!=='default') b.classList.add(`theme-${v}`) }} className="px-4 py-2 rounded bg-white/10 hover:bg-white/20">Pré-visualizar</button></div></div><div className="widget"><h3 className="font-semibold mb-2">Metas</h3><div className="grid grid-cols-1 md:grid-cols-3 gap-3"><label className="flex items-center gap-2">Água (L/dia)<input type="number" step="0.1" className="ml-2 bg-[color:var(--panel)] border border-white/10 rounded px-3 py-2 w-28" value={cfg.aguaMetaLitros} onChange={e=>setCfg({...cfg, aguaMetaLitros:Number(e.target.value)})} /></label><label className="flex items-center gap-2">Peso alvo (kg)<input type="number" step="0.1" className="ml-2 bg-[color:var(--panel)] border border-white/10 rounded px-3 py-2 w-28" value={cfg.weightTargetKg} onChange={e=>setCfg({...cfg, weightTargetKg:Number(e.target.value)})} /></label><label className="flex items-center gap-2">Ciclo: dias/semana<input type="number" step="1" className="ml-2 bg-[color:var(--panel)] border border-white/10 rounded px-3 py-2 w-28" value={cfg.cycleGoalDays} onChange={e=>setCfg({...cfg, cycleGoalDays:Number(e.target.value)})} /></label></div><div className="text-sm mb-2 mt-3 opacity-80">Modo de objetivo do Peso</div><div className="flex gap-4">{['auto','gain','loss'].map(m=>(<label key={m} className="flex items-center gap-2"><input type="radio" name="wm" value={m} defaultChecked={(cfg.weightGoalMode||'auto')===m} onChange={e=>setCfg({...cfg, weightGoalMode:e.target.value})} /> {m==='auto'?'auto (detecta)': m==='gain'?'ganhar':'perder'}</label>))}</div><button onClick={saveCfg} className="mt-3 px-4 py-2 rounded bg-white/10 hover:bg-white/20">Salvar metas</button></div><div className="widget"><h3 className="font-semibold mb-2">Dados</h3><div className="flex flex-wrap gap-3"><button onClick={onExport} className="px-4 py-2 rounded bg-white/10 hover:bg-white/20">Exportar</button><button onClick={()=>fileRef.current?.click()} className="px-4 py-2 rounded bg-white/10 hover:bg-white/20">Importar</button><input ref={fileRef} type="file" accept="application/json" className="hidden" onChange={onImportFile} /><button onClick={()=>{ if(confirm('Zerar dados?')){ reset(); location.reload() }}} className="px-4 py-2 rounded bg-red-500/70 hover:bg-red-500/90">Resetar</button></div></div></div></div></div>) }